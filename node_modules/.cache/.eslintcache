[{"/Users/paolobonavera/docs/development/react-ld/react-training/src/index.js":"1","/Users/paolobonavera/docs/development/react-ld/react-training/src/App.js":"2","/Users/paolobonavera/docs/development/react-ld/react-training/src/reportWebVitals.js":"3","/Users/paolobonavera/docs/development/react-ld/react-training/src/components/textinput.js":"4","/Users/paolobonavera/docs/development/react-ld/react-training/src/pages/output.js":"5","/Users/paolobonavera/docs/development/react-ld/react-training/src/components/droperiser.js":"6","/Users/paolobonavera/docs/development/react-ld/react-training/src/config/config.js":"7","/Users/paolobonavera/docs/development/react-ld/react-training/src/functions/sentencer.js":"8"},{"size":552,"mtime":1652793304000,"results":"9","hashOfConfig":"10"},{"size":686,"mtime":1654676886000,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1652793304000,"results":"12","hashOfConfig":"10"},{"size":3508,"mtime":1654878432103,"results":"13","hashOfConfig":"10"},{"size":865,"mtime":1654690174000,"results":"14","hashOfConfig":"10"},{"size":676,"mtime":1654876917642,"results":"15","hashOfConfig":"10"},{"size":2565,"mtime":1654877182656,"results":"16","hashOfConfig":"10"},{"size":301,"mtime":1653040754000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bo5nji",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/paolobonavera/docs/development/react-ld/react-training/src/index.js",[],[],"/Users/paolobonavera/docs/development/react-ld/react-training/src/App.js",[],[],"/Users/paolobonavera/docs/development/react-ld/react-training/src/reportWebVitals.js",[],[],"/Users/paolobonavera/docs/development/react-ld/react-training/src/components/textinput.js",["44","45","46"],[],"import { useCallback, useState } from \"react\"\r\nimport { names } from \"../config/config\"\r\nimport { Sentencer } from \"../functions/sentencer\"\r\nimport Droperiser from \"./droperiser\"\r\n\r\nconst TextInput = () => {\r\n  const [formData, setFormData] = useState(initaliseValues())\r\n  const [formValidation, setFormValidation] = useState(initaliseValues())\r\n\r\n  function initaliseValues() {\r\n    return {\r\n      regione: \"\",\r\n      provincia: \"\",\r\n      comune: \"\",\r\n      unita_urbanistica: \"\",\r\n      valore: \"\"\r\n    }\r\n  }\r\n\r\n  const FormCreator = () => (\r\n    names.map(name => InputDivider(name))\r\n  )\r\n\r\n  function InputDivider(name) {\r\n    if (name.type === \"drop\") {\r\n      return DropDownCreator(name)\r\n    } else if (name.type === \"text\") {\r\n      return TextBoxCreator(name)\r\n    }\r\n  }\r\n\r\n\r\n  const DropDownCreator = (name) => (\r\n    <div>\r\n      <Droperiser\r\n        key={name.id}\r\n        handleChange={handleChange}\r\n        name={name}\r\n        value={formData[name.naid]}\r\n        validation={formValidation[name.naid]}\r\n        choices={DropDownFilter(name)}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const DropDownFilter = (name) => {\r\n    const filteredItems = []\r\n    const prevObj = names[name.id - 2]\r\n    if (prevObj && name.refined && formData[prevObj.naid]) {\r\n      name.info.map(element => {\r\n        if (element.shortShow === formData[prevObj.naid] || element.shortShow === \"\") {\r\n          filteredItems.push(element)\r\n        }\r\n      })\r\n    } else {\r\n      name.info.map(element => { filteredItems.push(element) })\r\n    }\r\n    return filteredItems\r\n  }\r\n\r\n  const TextBoxCreator = (name) => (\r\n    <div>\r\n      <input\r\n        key={name.id}\r\n        type=\"text\"\r\n        value={formData[name.naid]}\r\n        onChange={handleChange}\r\n        name={name.naid}\r\n        placeholder={Sentencer(name.naid)}\r\n      />\r\n      {formValidation[name.naid] && <p className=\"invalid\">{formValidation[name.naid]}</p>}\r\n    </div>\r\n  )\r\n\r\n  const EmptyInputValidator = () => {\r\n    for (const key in formData) {\r\n      if (formData[key] === \"\" || formData[key] === \"-- Choose --\") {\r\n        formValidation[key] = \"*Enter this field\"\r\n      } else {\r\n        formValidation[key] = \"\"\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value, type, checked } = event.target\r\n    setFormData(prevFormData => {\r\n      return {\r\n        ...prevFormData, [name]: type === \"checkbox\" ? checked : value\r\n      }\r\n    })\r\n  }\r\n\r\n  const FinalValidation = () => {\r\n    let isValid = []\r\n    for (const key in formValidation) {\r\n      if (formValidation[key] === \"\") {\r\n        isValid.push(true)\r\n      } else {\r\n        isValid.push(false)\r\n      }\r\n    }\r\n    if (isValid.every(element => element)) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const handleSubmit = useCallback(\r\n    () => (event) => {\r\n      event.preventDefault()\r\n      EmptyInputValidator()\r\n      if (FinalValidation()) {\r\n        const rowData = (JSON.parse(localStorage.getItem(\"data\")) || [])\r\n        rowData.push(formData)\r\n        console.log(rowData)\r\n        localStorage.setItem(\"data\", JSON.stringify(rowData))\r\n        setFormData(initaliseValues())\r\n        setFormValidation(initaliseValues())\r\n      } else {\r\n        console.log(\"No\")\r\n      }\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit()}>\r\n        {FormCreator()}\r\n      </form>\r\n      <button onClick={() => console.log(formData)}>Clickme</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TextInput;","/Users/paolobonavera/docs/development/react-ld/react-training/src/pages/output.js",[],[],"/Users/paolobonavera/docs/development/react-ld/react-training/src/components/droperiser.js",[],[],[],"/Users/paolobonavera/docs/development/react-ld/react-training/src/config/config.js",[],[],"/Users/paolobonavera/docs/development/react-ld/react-training/src/functions/sentencer.js",[],[],{"ruleId":"47","severity":1,"message":"48","line":50,"column":29,"nodeType":"49","messageId":"50","endLine":50,"endColumn":31},{"ruleId":"47","severity":1,"message":"48","line":56,"column":29,"nodeType":"49","messageId":"50","endLine":56,"endColumn":31},{"ruleId":"51","severity":1,"message":"52","line":110,"column":24,"nodeType":"53","endLine":110,"endColumn":35},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier"]